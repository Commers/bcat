#!/usr/bin/env ruby
#/ Usage: bcat [-h] [-t <title>] [<file>]...
#/        btee <options> [<file>]...
#/ Read standard input, or one or more <file>s, and write to browser. When
#/ invoked as btee, also write input to standard output.
#/
#/ Options
#/   -h, --html          input is html encoded
#/   -t, --title=<text>  use <text> as the page title
#/   -d, --debug         enable verbose debug logging on stderr
require 'optparse'

options = {
  :html  => false,
  :title => Dir.pwd,
  :Host  => '127.0.0.1',
  :Port  => 8091,
  :debug => false
}

(class <<self;self;end).send(:define_method, :notice) { |message|
  warn "#{File.basename($0)}: #{message}" if options[:debug] }

ARGV.options do |argv|
  argv.on('-h', '--html')    { options[:html] = true }
  argv.on('-a', '--app=v')   { |app|  ENV['BCAT_APPLICATION'] = app }
  argv.on('-t', '--title=v') { |text| options[:title] = text }
  argv.on('-d', '--debug')   { options[:debug] = true }
  argv.on_tail('--help') { exec "grep ^#/ <#{__FILE__} | cut -c4-" }
  argv.parse!
end
ARGV.push '-' if ARGV.empty?

require 'bcat'
notice "loaded bcat v#{Bcat::VERSION}"

include Bcat::Browser
notice "env BCAT_APPLICATION=#{ENV['BCAT_APPLICATION'].inspect}"
notice "env BCAT_COMMAND=#{browser_command.inspect}"

reader =
  if File.basename($0) =~ /tee$/
    Bcat::TeeReader.new(ARGV, $stdout)
  else
    Bcat::Reader.new(ARGV)
  end

notice "starting server"
pid = nil
begin
  bcat = Bcat.new(reader, options)
  bcat.serve! do |sock|
    url = "http://#{bcat[:Host]}:#{bcat[:Port]}/#{File.basename(Dir.pwd)}"
    pid = browser(url)
  end
rescue Interrupt
  notice "interrupt"
end

Process.wait(pid) if pid
status = $?
notice "open exited with #{status}"
exit status
