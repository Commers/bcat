#!/usr/bin/env ruby
#/ Usage: bcat [-h] [<file>]...
#/ Read standard input, or one or more <file>s, and write to browser.
#/
#/ Options
#/   -h, --html          input is html encoded
#/   -t, --title=<text>  use <text> as the page title
require 'optparse'
require 'bcat'

options = {
  :html  => false,
  :title => Dir.pwd,
  :Host  => 'localhost',
  :Port  => 8091
}

ARGV.options do |argv|
  argv.on('-h', '--html')    { options[:html] = true }
  argv.on('-t', '--title=v') { |text| options[:title] = text }
  argv.on_tail('--help') { exec "grep ^#/ #{__FILE__} | cut -c4-" }
  argv.parse!
end

fds =
  ARGV.map do |file|
    if file == '-'
      $stdin
    else
      File.open(file, 'rb')
    end
  end
fds = [$stdin] if fds.empty?

command = ENV['BCAT_COMMAND'] || 'open $BCAT_ARGS "$BCAT_URL"'

pid = nil
begin
  bcat = Bcat.new(fds, options)
  bcat.serve! do |sock|
    pid =
      fork do
        (fds + [sock, $stdin, $stdout]).uniq.each { |fd| fd.close }
        ENV['BCAT_URL'] = "http://#{bcat[:Host]}:#{bcat[:Port]}/#{File.basename(Dir.pwd)}"
        ENV['BCAT_ARGS'] = "-a '#{ENV['BCAT_APPLICATION']}'" if !ENV['BCAT_APPLICATION'].to_s.empty?
        exec "/bin/sh -c \"#{command}\""
      end
  end
rescue Interrupt
end

Process.wait(pid) if pid
exit $?
